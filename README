README

I created a Makefile to make generation a bit simpler.

Bison code is in parser.ypp
Flex code is in scanner.l

The remainder of the code for managing the AST and generating IR can be found in

- IRGen.cpp & IRGen.h 					(primarily IR generation functionality)
- driver.cpp & driver.h 				(main driver to run everything)
- Node.cpp & Node.h					(Nodes used as a part of the AST)
- input.c & input.ll & output.c & output.ll		(These are compiled by CLANG and used "as a part of the C- language" to perform simple I/O of integers)

Out of these, changes were only made to IRGen.cpp, where there were a handful of bugs, 
and the IR Generation was incorrect in some areas:
- Fixed: some BasicBlocks previously contained multiple terminal instructions, every basic block now contains one terminal instruction
- Fixed: some BasicBlocks had no predecessors (were unreachable), have removed these
- Fixed: previous control flow between some BasicBlocks were broken because there were no terminal instructions, updated
these cases so the basic blocks branch unconditionally to the next basic block (which was the intended behavior anyway)
- Fixed: if statements when combined with return statements
- Fixed: a bug related to the use of GEP passing local and global arrays as Int32Ptrs to functions
- Fixed: input and output function declarations (part of the language)

I built everything on 
	Linux  Ubuntu 18.04, x86_64

I created a few additional files to test thing out:
> arrays    (directory) -- contains arrays.C- and arrays.c that were used to test out array functionality that was causing issues
   - arrays.c              (A simple C file containing a few different array operations to be tested out)
   - arrays.C-             (A simple C- file containing a few different array operations to be tested out)
   - arrays.ll             (IR generated after linking input.ll, output.ll and arrays.C-.ll using the llvm-link utility)
   - clang_arrays.ll       (IR generated by clang from arrays.c, using `clang -c -S -emit-llvm arrays.c -o clang_arrays.ll)
   - clang_arrays_full.ll  (IR generated after linking input.ll and output.ll, with clang_arrays.ll using the llvm-link utility)
   - arrays.C-.ll          (IR generated by our compiler -- using `./compiler arrays.C-`)
   - input.ll              (input file mentioend above, compiled to IR with clang, used to accept integers as input)
   - output.ll             (output file mentioned above, compiled to IR with clang, used to print integers to the console)

During the process of testing, we would compare our generated IR and the Clang generated IR, and make adjustments where necessary.
This helped address errors with array accesses, global variable array initialization, among other things.



I created the following directories 

additionally included are the provided input files (gcd.C- and sort.C-)

This program has been tested and works on the two provided input files
- gcd.C- and sort.C-

To run, simply use

./compiler <filename>

During the processing of the file it will print out:
- The Symbol Table
- The AST
- The IR

It will also write the IR to <filename>.ll

This should incorporate the portions that were lacking on my previous submission:
- Global Variable Support
- Array Support
- Propper Handling of Return Values

It should also have fewer bugs than the previous submission


To actually make use of the generated bitcode, we can run it with the llvm-provided JIT: (lli)

To generate the necessary files for gcd.C- (after pre-compiling input.c and output.c)
	./compiler gcd/gcd.C- 
	cd gcd
	llvm-link gcd.C-.ll input.ll output.ll | llvm-dis > gcd.ll
	lli gcd.ll

To generate the necessary files for sort.C- (after pre-compiling input.c and output.c)
	./compiler sort/sort-10.C- 
	cd sort
	llvm-link sort-10.C-.ll input.ll output.ll | llvm-dis > sort.ll
