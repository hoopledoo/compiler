README

I created a Makefile to make generation a bit simpler.

Bison code is in parser.ypp
Flex code is in scanner.l

The remainder of the code for managing the AST and generating IR can be found in

- IRGen.cpp & IRGen.h 							(primarily IR generation functionality)
- driver.cpp & driver.h 						(main driver to run everything)
- Node.cpp & Node.h								(Nodes used as a part of the AST)
- input.c & input.ll & output.c & output.ll		(the intention of these files was to llvm-link them	
												together with the programs to test the execution. Unfortunately
												The IRgeneration was not working well-enough to achieve these results)

I built everything on 
	Linux  Ubuntu 18.04, x86_64

I created a few additional files to test thing out:
> array_test.c  	(I compiled this with clang into IR to compare and figure out how to implement arrays)
> test.c- 			(primarily used while adding new features to IR generation)
> simple.program 	(primarily used while adding new features to IR generation)
> error.program 	(primarily used when testing semantic analysis)

additionally included are the provided input files (gcd.C- and sort.C-)

This program has been tested and works on the two provided input files
- gcd.C- and sort.C-

To run, simply use

./compiler <filename>

During the processing of the file it will print out:
- The Symbol Table
- The AST
- The IR

It will also write the IR to <filename>.ll

This should incorporate the portions that were lacking on my previous submission:
- Global Variable Support
- Array Support
- Propper Handling of Return Values

It should also have fewer bugs than the previous submission


To actually make use of the generated bitcode, we can run it with the llvm-provided JIT: (lli)

To generate the necessary files for gcd.C- (after pre-compiling input.c and output.c)
	./compiler gcd/gcd.C- 
	cd gcd
	llvm-link gcd.C-.ll input.ll output.ll | llvm-dis > gcd.ll
	lli gcd.ll

To generate the necessary files for sort.C- (after pre-compiling input.c and output.c)
	./compiler sort/sort-10.C- 
	cd sort
	llvm-link sort-10.C-.ll input.ll output.ll | llvm-dis > sort.ll