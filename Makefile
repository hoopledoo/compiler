# Makefile to help make building everything simpler 

# The default make option will compile our compiler
default:
	bison -d parser.ypp
	flex -o scanner.c scanner.l 
	clang++ -g parser.tab.cpp scanner.c driver.cpp Node.cpp IRGen.cpp \
				$(shell llvm-config --cxxflags --ldflags --libs core) \
				-ltinfo \
				-lpthread \
				-o compiler

# `make io` will generate the IR for the input and output methods
io:
	clang -O3 -c -emit-llvm -S input.c -o input.ll
	clang -O3 -c -emit-llvm -S output.c -o output.ll

# `make ir` will link together all generated IR files together
ir:
	llvm-link *.ll

# `make clean` will clean up and delete all intermediate artifacts
# including code generated by flex and bison, as well as intermediate object files
clean: 
	rm -f *.o
	rm -f parser.tab.*
	rm -f scanner.c	

# `make clean-all` will remove everything but the source files I've written
clean-all:
	rm -f *.o
	rm -f parser.tab.*
	rm -f scanner.c
	rm -f compiler
	rm -f *.ll
